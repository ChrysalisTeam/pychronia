PYCHRONIA README
#############################


Prerequisites
=================

- You need to have Python3.5+ installed on your system
- Setup and activate a python3 virtual environment, if you wish

- On a debian/ubuntu, install additional dev files:

     $ sudo apt-get install python python-dev python-pip libjpeg8-dev libmysqlclient-dev"

- Checkout the repository to your system with GIT, or download/extract it as a zip

- To ensure that the initializer "setup_pychronia_env.py" is well found by the different scripts, its' advised to have the root of repository in your PYTHONPATH (eg. via your Windows environment variables, or ~/.bashrc on linux, or virtualenv's activate script...)


Installing dependencies and creating game DBs
==============================================

The quick way to setup the engine is to launch "python BOOTSTRAP.py" from the root of the depot (provided that you don't need admin rights to install python packages).

If no errors occur (except some deprecation warnings), then the game portal is ready for use.

Else::

	With or without sudo (depending on whether you use a system python or a virtualenv):

	$ pip install -r  requirements.txt

	On windows : if some C-backed python modules fail at installing (ex. because VC++ environment is not setup), then comment the problematic modules out of the requirements.txt, and install them via precompiled packages (*.msi, *.exe...)

	Then reset both Mysql DB and Zope Object DB for the game portal, using the "runner.py" described below.

The Django-CMS app, located in "pychronia_cms" package, behaves like a quite standard Django application, in development mode you can setup its databases and run a test server via the "pychronia_cms/tests/manage.py" script.
So the remaindee of this doc focuses on the non-standard "pychronia_game" package.


Regenerating CSS files
=======================

If you modify SCSS files (used by both game portal and django-cms), you'll have to recompile them with pyScss.

See pychronia_common/static/MetalRadiance/build.bat for related commands.


Utilities and servers
========================

The script "runner.py", in pychronia_game/tests/ folder, can be used to "reset_django" (the MySQL DB storing sesssions) and then "reset_zodb" (the object DB containing game data), see its help::

    python pychronia_game/tests/runner.py --help

The demo game which gets created, is by default filled with the content of "pychronia_game/tests/test_game_files/game_initial_data.yaml", and then altered by the GAME_INITIAL_FIXTURE_SCRIPT() function if it exists in settings.

You may modify GAME_FILES_ROOT and GAME_INITIAL_DATA_PATH settings to point respectively to a different tree of game assets, and a different yaml fixture file (or list of folders/files).

In addition to resetting DBs, the runner.py script of pychronia_game package can pack persistent ZODB, and run django dev server against test DBs located in the same directory::

When dev server is launched, the test game instance (created by "reset_zodb") can be reached at "http://localhost:8000/DEMO/"

**Game master credentials are the "master_login" and "master_password" fields of your game data "global_parameters". They are master/ultimate by default, in test fixtures.**

..note::

    Standard manage.py scripts, pointing to the "persistent test DB" configuration, are also available in /test folders, so as to launch standard dev servers, or issue any other standard django commands.

    Note that the "manage.py" file at depot root expects a PROD setup, with a "pychronia_settings.py" file (or symlink) available; in dev environment, you won't need it.


Special support for Chrysalis RPG
============================================

There is specific tooling to load the "Chrysalis" RPG campaign (https://chrysalis-game.com/fr/cms/). 

If the game data repository of this RPG is stored in a "Chrysalis/" folder which is sibling with the root folder of your Pychronia repository, then it'll be automatically detected,
and the `generate_auction_settings()` or `generate_mindstorm_settings()` functions can be used to automatically setup the game in either murder-party or alternate-reality-game mode.

See "pychronia_game/tests/persistent_mode_settings.py" for more information.


Launching game tests
=======================

Tests are run with py.test against fake databases stored in temp directories::

    cd pychronia_game/tests/ ; pytest -vl 

See http://pytest.org/latest/usage.html#usage for more usage info

WARNING - if you use a virtualenv, "python -m pytest" might be safer to use, so that you're sure to use the proper python executable.


Managing games as a super admin
=================================

First use "python manage.py createsuperuser" to create a standard django admin account, from within the "pychronia_game/tests/" folder.

Then sign in via the dev server at http://localhost:8000/admin/

Now you can manage the different pychronia games at http://localhost:8000/administration/


Sources Tree Overview for pychronia_game package
===================================================

Most of the *pychronia_game* package consists of standard django components, and other common python modules:

- urls.py: django url routing files
- common_settings.py: default settinsg for all deployments using pychronia_game
- context_processors.py: add common game info in HTML template contexts
- forms.py: django declarative web forms
- middlewares.py: django middlewares, for pre and post processing of request
- models.py: required by django, but empty here (we don't use django's SQL ORM for our data)
- locale/: standard gettext files, for site translation
- template/: standard django templates
- templatetags/: custom django template tags and filters
- tests/: unit-tests and web-tests for the site
- utilities/: misc. data types and handy functions
- views/: not standard django function-views, these are similar to django class-based
  generic views: "GameView" classes that must be instantiated on each request, and that perform a lot of work ;
  some of these gameviews are "abilities", that are linked more closely to the datamanager, in which they have
  a private storage area - they actually behave as "extensions" of the datamanager.

Pychronia adds to these standard entries some layers dedicated to the game system:

- authentication.py: utilities to log in and out as a character or game master
- common.py: centralizes most useful variables of the application, to be imported as "from pychronia_game.common import *"
- default_game_settings.py: mainly a good reminder of available pychronia_game settings
- menus.py: dynamically builds nested menus for the page, depending on the permissions of the current user
- datamanager/: dynamic stack of classes, designed to wrap a ZODB and expose tons of getter/setter/utility methods, as well as powerful class-based views
- scripts/: scripts to help maintain a pychronia_game deployment


Summary of HTTP request processing in pychronia_game
========================================================

When a HTTP request reaches the site, the following tasks are performed:

- pychronia_game middlewares determine which instance of the game is concerned
- they attach to the request a proper datamanager instance, perform user authentication, and process pending tasks that might remain (delayed actions, email sendings...)
- the targeted GameView is instantiated, and called with the request object as parameter
- the GameView performs access checks, returning HTTP error responses if needed
- depending on the kind of request (ajax or not), and the presence (or not) of POST data, the GameView modifies the content of the datamanager (via its public API) according to game rules, and action mixins
- the json or html response is built with templates and their associated data contexts
- middlewares perform some cleanup, and the response is returned to the user


Development tips for pychronia_game
======================================

- Only *persistent* versions of mutable types should be stored into the ZODB
  (and this is enforced by pychronia_game's checking system),
  so use Persistent subtypes instead of standard lists/dicts/sets.
- Regarding persistent objects: do NOT use PersistentMapping.copy() since it marks data as changed, and copy.copy() might cause troubles by copying object ZODB-IDs ; so use utilities.safe_copy(), or dict()/list() constructors, instead.
- All public methods of the datamanager must have a decorator (readonly_method, transaction_watcher...)
  to take care of ZODB transactions, depending on whether it may modify content or not.
- If webdesign gets broken, ensure you have well your {% extends %} tags at the TOP of your template
- Gameviews offer a powerful API to process forms, and turn them into method calls - no need to manually validate forms anymore.
- *register_view()* can be used to turn a standard django view into a GameView.
- An old Django debug toolbar might require a fix in django core/handlers/base.py to work with custom urlconfs::
  SEE https://code.djangoproject.com/ticket/19784#ticket
  More generally, django debug toolbar doesn't play well with our ZODB use, so you'd better keep it deactivated
- if layout gets screwed up in Chrome (a vertical spacing before the anthropia header, "&#65279;." appearing in web debugger), it's probably due to Byte Order Marks in html templates - just remove them.









